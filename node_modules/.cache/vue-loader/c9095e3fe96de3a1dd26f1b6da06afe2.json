{"remainingRequest":"/Users/eum/git/vue-project/cauldron/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eum/git/vue-project/cauldron/src/components/Input.vue?vue&type=style&index=0&id=54844eca&scoped=true&lang=css&","dependencies":[{"path":"/Users/eum/git/vue-project/cauldron/src/components/Input.vue","mtime":1620633758378},{"path":"/Users/eum/git/vue-project/cauldron/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eum/git/vue-project/cauldron/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/eum/git/vue-project/cauldron/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/eum/git/vue-project/cauldron/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eum/git/vue-project/cauldron/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdGV4dGFyZWEgewogIGhlaWdodDogMzAwcHg7CiAgd2lkdGg6IDgwJTsKICBmb250LWZhbWlseTogQ29uc29sYXMsICJDb3VyaWVyIE5ldyIsIG1vbm9zcGFjZTsKfQojY2F1bGRyb25JbnB1dCB7CiAgY29sb3I6IHJnYig0OSwgNDksIDE1Myk7Cn0KLmlucHV0VGl0bGUgewogIGZvbnQtc2l6ZTogMnJlbTsKICBtYXJnaW4tYm90dG9tOiAxMHB4Owp9Ci5zZWxlY3RCdG4gPiBidXR0b24gewogIG1hcmdpbi1sZWZ0OiA1cHg7Cn0KLmNsb3NlTW9kYWxCdG4gewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["Input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Input.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"cauldronInput\">\n    <p class=\"inputTitle\">Input Data</p>\n    <textarea v-model=\"inputData\" placeholder=\"Please, input data\"></textarea>\n    <div class=\"selectBtn\">\n      <span>\n        <select v-model=\"selected\">\n          <option disabled value=\"\">Please select one</option>\n          <option>copy</option>\n          <option>quote</option>\n          <option>line_count</option>\n          <option>encode_utf8</option>\n          <option>shorttrace</option>\n        </select>\n      </span>\n      <button v-on:click=\"clickConvert\">CONVERT</button>\n      <Modal v-if=\"showModal\" @close=\"showModal = false\">\n        <h3 slot=\"header\">\n          Warning!\n          <i class=\"closeModalBtn fas fa-times\" @click=\"showModal = false\"></i>\n        </h3>\n        <h5 slot=\"body\">Please Input Data!</h5>\n      </Modal>\n    </div>\n    <p class=\"inputTitle\">Output Result</p>\n    <textarea v-model=\"outputResult\"></textarea>\n  </div>\n</template>\n\n<script>\nimport Modal from \"./common/Modal\";\n\nexport default {\n  data() {\n    return {\n      inputData: \"\",\n      selected: \"\",\n      outputResult: \"\",\n      showModal: false,\n    };\n  },\n  methods: {\n    clickConvert() {\n      if (this.inputData !== \"\") {\n        if (this.selected === \"copy\") {\n          this.outputResult = this.inputData;\n        } else if (this.selected === \"quote\") {\n          this.outputResult = '\"' + this.inputData + '\"';\n        } else if (this.selected === \"line_count\") {\n          this.outputResult = this.inputData.split(\"\\n\").length;\n        } else if (this.selected === \"encode_utf8\") {\n          const encoder = new TextEncoder();\n          const codes = encoder.encode(this.inputData);\n          this.outputResult = codes;\n        } else if (this.selected === \"shorttrace\") {\n          const is_skippable = (line) => {\n            if (\n              line.match(/org\\.apache\\.felix\\.http\\.base\\.internal\\./) ||\n              line.match(/\\.doFilter\\(/)\n            ) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n          const input_lines = this.inputData.split(\"\\n\");\n          let output_lines = [];\n          let packages = [\"\", \"\", \"\"];\n\n          const line_count = input_lines.length;\n          for (let i = 0; i < line_count; i++) {\n            const line = input_lines[i];\n\n            if (!is_skippable(line)) {\n              output_lines.push(line);\n            }\n\n            const stack_regex = /\\s+at ([\\w.$<>]+)\\(([^)]+)\\)/;\n            const matches = stack_regex.exec(line) || [];\n            console.log({ matches });\n\n            if (matches.length == 3) {\n              const modules = matches[1].split(\".\");\n              const j_method = modules.pop();\n              const j_class = modules.pop();\n              const j_package = modules.join(\".\");\n              packages.push(j_package);\n              packages.shift();\n              const j_source = matches[2];\n              console.log([\n                { j_class },\n                { j_method },\n                { j_source },\n                { packages },\n              ]);\n\n              if (packages[0] === j_package && packages[1] === j_package) {\n                if (\n                  !/\\s- \\w/.exec(input_lines[i + 1]) &&\n                  output_lines.slice(-1)[0] !== \"...\"\n                ) {\n                  output_lines.pop();\n                  output_lines.pop();\n                  output_lines.push(\"...\");\n                }\n              }\n            } else {\n              packages = [\"\", \"\", \"\"];\n            }\n          }\n\n          this.outputResult = output_lines.join(\"\\n\");\n        }\n      } else {\n        // input text areaに何も入力されない状態でボタンをクリックするとアラートを出す\n        this.showModal = !this.showModal;\n      }\n    },\n  },\n  components: {\n    Modal,\n  },\n};\n</script>\n\n<style scoped>\ntextarea {\n  height: 300px;\n  width: 80%;\n  font-family: Consolas, \"Courier New\", monospace;\n}\n#cauldronInput {\n  color: rgb(49, 49, 153);\n}\n.inputTitle {\n  font-size: 2rem;\n  margin-bottom: 10px;\n}\n.selectBtn > button {\n  margin-left: 5px;\n}\n.closeModalBtn {\n  color: #42b983;\n}\n</style>\n"]}]}